# -*- coding: utf-8 -*-
"""Meh. Lab 1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m_ULsnPFBrgrnR1uoX5LSEeAUSBw_AK-
"""
#%%
import numpy as np
from scipy.integrate import odeint
import matplotlib.pyplot as plt

b = 0.4
k = 4
m = 0.1
A = np.array([[0,1],[-k/m, -b/m]])

t0=0
tf=3
increment = 0.01
t=np.arange(t0,tf,increment)
x0=[2,0]

import typing
from typing import List, Callable

#%%
def solve_spring_damper(y0 : np.array, t : np.array, args : List[float]) -> np.array:
  """solver for spring-damper system"""
  
  match args:
    case [_, _, _]:
      b, k, m = args
    case _:
      print("not enough arguments")

  A = np.array([[0,1],[-k/m, -b/m]])
  
  def state_space(y, t):
    return np.dot(A, y)
  
  return odeint(func=state_space, y0=y0, t=t)
#%%

def solve(args: List[Callable, dict]):
  res = [None for i in range(len(l))]
  for i, (f, args) in enumerate(l):
    res[i] = f(**args)
  return res

def plot_sol(args : list(dict())):
  """[arg] -> grid (plot arg)"""
  
  fig, ax = plt.subplots(1, len(args), figsize=(5*len(args), 5))
  ax = np.array(ax).reshape(-1)
  fig.tight_layout(pad=3.0)

  for i in range(len(xy)):
    x,y = xy[i]
    ax[i].grid()
    ax[i].set(xlabel=x_label, ylabel = y_label)
    ax[i].plot(x, y, color=color[i], label=label[i])
    ax[i].legend(loc = 'best')
  
  plt.show()
#%%
sol = solve([[solve_spring_damper,{}], [solve_spring_damper,{"b":4}]])
#%%
plot_sol(xy = [[t,sol[0][:,0]]], color=['b'], label=['x(t)'], x_label='t', y_label='x')
#%%

plot_sol(
    x = [sol[0][:,0], sol[1][:,0]], 
    y = [sol[0][:,1], sol[1][:,1]], 
    color=['b', 'g'], 
    label=[f"$b={b}$", f"$b={4}$"], 
    x_label="$x(t)$", 
    y_label="$\dot x(t)$"
    )

sol = pend_param(x0 = x0, t = t, b = 0, k = k, m = m)